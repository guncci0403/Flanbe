<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="eval">
	
	<!-- 프로젝트 참가 테이블 가지고 오기 -->
	<select id="selectProjectAttend" parameterType="String" resultType="pattendVo">
		select * from p_attend where user_id = #{user_id}
	</select>
	
	
	<!-- 평가 테이블 가지고 오기 -->

	<select id="selectEvaluation" parameterType="String" resultType="evaluationVo">
        select nvl(round(avg(pro) , 1) , 0) pro , nvl(round(avg(sat) , 1 ) , 0) sat , nvl(round(avg(comm) , 1) , 0) comm , 
        nvl(round(avg(ontime) , 1) , 0 ) ontime , nvl(round(avg(activity) , 1 ), 0) activity , nvl(round(avg(average), 1) , 0 ) average
        from evaluation 
        where user_id = #{user_id}
	
	</select>
	
	
	<!-- 파트너스들의 참여한 (참여완료해서 프로젝트가 끝난) 프로젝트 갯수 -->
	<select id="countFinishProject" parameterType="String" resultType="int">
		select count(*) from p_attend where user_id = #{user_id} AND p_state = 4
	</select>
	
	<!-- 파트너스들이 참여한 전체 프로젝트에 대한 평가평균구하기 -->
	<select id="averageEvaluation" parameterType="String" resultType="int">
		select NVL(round(avg(average)) , 0 ) average
		from evaluation
		where user_id = #{user_id}
	</select>
	
	<!--  진행한 프로젝트 분야(프로젝트 수행 이력 테이블 가지고 오기) --> 
	<select id="selectProjectHistory" parameterType="String" resultType="historyVo">
		select *
		from history
		where user_id = #{user_id}
	</select>
	
	<!-- 기본 :  프로젝트정보와 클라이언트의 평가말 나오는 곳 리스트로 받는다. -->
	
	<select id="selectProjectEvaluation" parameterType="hashMap"  resultType="projectVo2">
        SELECT * 
        FROM
        (SELECT ROWNUM rn , a.*
        FROM
        (SELECT p.p_code , p.p_title  , p.p_money , p.period , p.user_id , e.e_cont , e.pro , e.sat , e.comm , e.ontime, e.activity , e.average 
		FROM project p , evaluation e
		where e.user_id = #{user_id}
		AND p.p_code = e.p_code
        AND p.p_state = '09'
        ORDER by p.p_code) a
        WHERE ROWNUM &lt;= #{page} * 6 )
        WHERE rn between (#{page} - 1) * 6 + 1 AND #{page} * 6 
	</select>
	
	
	<!-- 최신 프로젝트 순 :   -->
	
	<select id="selectLatestProjectEval" parameterType="hashMap"  resultType="projectVo2" >
		SELECT * 
        FROM
        (SELECT ROWNUM rn , a.*
        FROM
        (SELECT p.p_code , p.p_title  , p.p_money , p.period , p.user_id , e.e_cont , e.pro , e.sat , e.comm , e.ontime, e.activity , e.average 
		FROM project p , evaluation e
		where e.user_id = #{user_id}
		AND p.p_code = e.p_code
        AND p.p_state = '09'
        ORDER by p.p_edt desc ) a
        WHERE ROWNUM &lt;= #{page} * 6 )
        WHERE rn between (#{page} - 1) * 6 + 1 AND #{page} * 6 
	
	
	</select>
	
	<!-- 평점 높은순 :   -->
	 <select id="selectLowScoreProjectEval" parameterType="hashMap"  resultType="projectVo2" >
	 
	 SELECT * 
        FROM
        (SELECT ROWNUM rn , a.*
        FROM
        (SELECT p.p_code , p.p_title  , p.p_money , p.period , p.user_id , e.e_cont , e.pro , e.sat , e.comm , e.ontime, e.activity , e.average 
		FROM project p , evaluation e
		where e.user_id = #{user_id}
		AND p.p_code = e.p_code
        AND p.p_state = '09'
        ORDER by e.average desc ) a
        WHERE ROWNUM &lt;= #{page} * 6 )
        WHERE rn between (#{page} - 1) * 6 + 1 AND #{page} * 6 
	 
	 
	 </select>
	<!-- 평점 낮은 순 :   -->
	 <select id="selectHighScoreProjectEval" parameterType="hashMap"  resultType="projectVo2" >
	 	SELECT * 
        FROM
        (SELECT ROWNUM rn , a.*
        FROM
        (SELECT p.p_code , p.p_title  , p.p_money , p.period , p.user_id , e.e_cont , e.pro , e.sat , e.comm , e.ontime, e.activity , e.average 
		FROM project p , evaluation e
		where e.user_id = #{user_id}
		AND p.p_code = e.p_code
        AND p.p_state = '09'
        ORDER by e.average ) a
        WHERE ROWNUM  &lt;= #{page} * 6 )
        WHERE rn between (#{page} - 1) * 6 + 1 AND #{page} * 6 
	 
	 
	 
	 </select>
	<!-- 금액 높은순   :   -->
	<select id="selectHighCostProjectEval" parameterType="hashMap"  resultType="projectVo2">
		SELECT * 
        FROM
        (SELECT ROWNUM rn , a.*
        FROM
        (SELECT p.p_code , p.p_title  , p.p_money , p.period , p.user_id , e.e_cont , e.pro , e.sat , e.comm , e.ontime, e.activity , e.average 
		FROM project p , evaluation e
		where e.user_id = #{user_id}
		AND p.p_code = e.p_code
        AND p.p_state = '09'
        ORDER by p.p_money desc ) a
        WHERE ROWNUM &lt;= #{page} * 6 )
        WHERE rn between (#{page} - 1) * 6 + 1 AND #{page} * 6 
        
	</select>
	
	
	
	
	<!-- 등록된 참여 완료한 프로젝트의 숫자 -->
	<select id="countProjectEvaluation" parameterType="String" resultType="int">
		SELECT count(*)
		FROM project p , evaluation e
		where e.user_id = #{user_id}
		AND p.p_code = e.p_code
	
	</select>
	
	<!-- 등록된 포트폴리오 수  -->
	
	<select id="selectCountPortfolio" parameterType="String" resultType="int">
	    select count(*)
        from portfolio
        where user_id = #{user_id}
	</select>
	
	
	
	<!-- 사람들 뽑기 -> 충분히 고치고 생각하기 ㅣ지금은 기본으로 뽑을것임 -->
	
	<select id="viewUserList" resultType="userVo">
		select *
		from users
		where purpose = 'P'
	</select>
	
	
	<!-- 평가테이블에 존재하는 회원리스트만 출력 -->



<!-- 건영 --><!-- 건영 --><!-- 건영 --><!-- 건영 --><!-- 건영 --><!-- 건영 --><!-- 건영 --><!-- 건영 -->
	<!-- !!건영!! 최신 프로젝트 순 :   -->
	<select id="selectLatestProjectEval2" parameterType="String" resultType="projectVo2">
        SELECT p.p_code , p.p_title  , p.p_money , p.period , p.user_id , e.e_cont , e.pro , e.sat , e.comm , e.ontime, e.activity , e.average 
		FROM project p , evaluation e
		WHERE e.user_id = #{user_id}
		AND p.p_code = e.p_code
        AND p.p_state = '09'
        ORDER by p.p_edt desc
	</select>
<!-- 건영 --><!-- 건영 --><!-- 건영 --><!-- 건영 --><!-- 건영 --><!-- 건영 --><!-- 건영 --><!-- 건영 -->
</mapper>