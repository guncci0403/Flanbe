<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="note">
	
	<!--note 글리스트 갯수 가지고 오기 -->
	<select id="countList" parameterType="noteVo" resultType="int">
	    select count(*) 
        from note 
        where n_state = #{n_state} 
        <if test="n_title != null and n_title.equals('key')">
		AND n_import = '01'
		</if>
        AND p_code = #{p_code} 
        AND n_parent is null
	</select>
	
	
	<!-- 진행전 노트 리스트 -->
	<select id="selectNoteListBefore" parameterType="hashMap" resultType="noteVo">
	    select  rn 
	    , n_no 
	    , user_id 
	    , p_code 
	    , n_title 
	    , n_cont 
	    , category 
	    , n_import 
	    , to_char(n_regdt , 'YYYY-MM-DD AM HH24:MI:SS' ) n_regdt
	    , n_state 
	    , n_gno 
	    , n_parent 
	    , progress
	    , to_char(n_sdt , 'YYYY-MM-DD' ) n_sdt, to_char(n_edt , 'YYYY-MM-DD' ) n_edt
        from
	        (select ROWNUM rn , a.*
	        from
		    	(select * 
				from note 
				where n_state = '01'
				AND n_parent is null
				<if test="n_title != null and n_title.equals('key')">
				AND n_import = '01'
				</if>
				AND p_code = #{p_code}  
		        order by n_regdt desc) a
		    WHERE ROWNUM &lt;= #{page} * 3)
		WHERE rn between (#{page} - 1) * 3 + 1 AND #{page} * 3
	</select>


	<!-- 진행중 노트 리스트 -->	
	<select id="selectNoteListIng" parameterType="hashMap" resultType="noteVo">
	    select  rn 
	    , n_no 
	    , user_id 
	    , p_code 
	    , n_title 
	    , n_cont 
	    , category 
	    , n_import 
	    , to_char(n_regdt , 'YYYY-MM-DD AM HH24:MI:SS' ) n_regdt
	    , n_state 
	    , n_gno 
	    , n_parent 
	    , progress
	    , to_char(n_sdt , 'YYYY-MM-DD' ) n_sdt
	    , to_char(n_edt , 'YYYY-MM-DD' ) n_edt 
        from
	        (select ROWNUM rn , a.*
	        from
		    	(select * 
				from note 
				where n_state = '02'
				AND n_parent is null
				<if test="n_title != null and n_title.equals('key')">
				AND n_import = '01'
				</if>
				AND p_code = #{p_code} 
		        order by n_regdt desc) a
	        WHERE ROWNUM &lt;= #{page} * 3)
        WHERE rn between (#{page} - 1) * 3 + 1 AND #{page} * 3 
	</select>
	
	
	<!-- 진행끝난 노트 리스트 -->
	<select id="selectNoteListFinish" parameterType="hashMap" resultType="noteVo">
	    select  rn 
	    , n_no 
	    , user_id 
	    , p_code 
	    , n_title 
	    , n_cont 
	    , category 
	    , n_import 
	    , to_char(n_regdt , 'YYYY-MM-DD AM HH24:MI:SS' ) n_regdt, n_state , n_gno , n_parent , progress, to_char(n_sdt , 'YYYY-MM-DD' ) n_sdt, to_char(n_edt , 'YYYY-MM-DD' ) n_edt 
        from
        (select ROWNUM rn , a.*
        from
    	(select * 
		from note 
		where n_state = '03'
		AND n_parent is null
		<if test="n_title != null and n_title.equals('key')">
		AND n_import = '01'
		</if>
		AND p_code = #{p_code} 
        order by n_regdt desc) a
        WHERE ROWNUM &lt;= #{page} * 3)
        WHERE rn between (#{page} - 1) * 3 + 1 AND #{page} * 3
	</select>

	<!-- 업무 노트 부모글 -->
	<insert id="insertNote" parameterType="noteVo" useGeneratedKeys="false">
		insert into note values (NOTE_SEQ.nextval 
								, #{user_id} 
								, #{p_code} 
								, #{n_title} 
								, #{n_cont} 
								, #{category}
        						, #{n_import} 
        						, sysdate 
        						, #{n_state} 
        						, NOTE_SEQ.nextval 
        						, null 
        						, #{progress} 
        						, #{n_sdt} 
        						, #{n_edt} )        
        <selectKey keyProperty="n_no" resultType="int" order="AFTER">
        	select NOTE_SEQ.currval from dual 
        </selectKey>
	</insert>	
	<!-- 업무 노트 답글 등록하기 -->	
	<insert id="insertNoteReply" parameterType="noteVo" useGeneratedKeys="false">
		insert into note values (NOTE_SEQ.nextval 
								, #{user_id} 
								, #{p_code} 
								, #{n_title} 
								, #{n_cont} 
								, #{category}
        						, #{n_import} 
        						, sysdate 
        						, #{n_state} 
        						, #{n_gno} 
        						, #{n_parent} 
        						, #{progress} 
        						, #{n_sdt} 
        						, #{n_edt} )
		  <selectKey keyProperty="n_no" resultType="int" order="AFTER">
        	select NOTE_SEQ.currval from dual 
        </selectKey>
	</insert>
	
	
	
	<!-- note 글 한개 조회하기 -->
	<select id="selectNote" parameterType="int" resultType="noteVo">
		select n.n_no , n.user_id , n.p_code , n.n_title , n.n_cont , n.category , n.n_import , 
        to_char(n.n_regdt , 'YYYY-MM-DD AM HH24:MI:SS') n_regdt , n.N_STATE , n.N_GNO , n.N_PARENT , n.progress , to_char( n.n_sdt ,'YYYY-MM-DD' ) n_sdt , to_char( n.n_edt ,'YYYY-MM-DD' ) n_edt 
        , g.code_name code_name
		from note n , comm_code g  
		where n_no = #{n_no}
		and code_group = 500
		and g.c_code = n.n_state
	</select>
	
	
	
	<!-- 답글 리스트 조회하기 파라미터는 : n_parent-->
	<select id="selectReplyNote" parameterType="int" resultType="noteVo">
		select *
        from note 
        where n_parent = #{n_parent}
    </select>
    
    
    <!-- note 한개 수정하기 -->
    <update id="updateNote" parameterType="noteVo">
    update note set n_title = #{n_title} , n_cont = #{n_cont} , category = #{category} , n_import = #{n_import} , n_regdt = sysdate , n_state = #{n_state}
	, progress = #{progress} ,  n_sdt = #{n_sdt} , n_edt = #{n_edt}
	where n_no = #{n_no}
    
    </update>
    
    
    <!-- 댓글 -->
    
    
    <!-- note 계층형 댓글 리스트 조회하기  -->
    <select id="selectReply" parameterType="int" resultType="replyVo">
	  select level 
	  		, r_no 
	  		, n_no 
	  		, user_id 
	  		,  lpad(' ' , (level - 1)*5 ) || r_cont r_cont
	  		, to_char(r_regdt , 'YYYY-MM-DD AM HH24:MI:SS' ) r_regdt 
	  		, r_gno 
	  		, r_parent 
	  		, 	(SELECT b.user_id 
	  			FROM reply b 
	  			WHERE b.r_no = a.r_parent) AS r_parent_name
      from reply a 
      where n_no = #{n_no}
      start with r_parent is null 
      connect by prior r_no = r_parent
      order SIBLINGS by r_gno , r_no
    </select>
    
    
    <!-- 댓글 등록하기 -->
    <!-- 최상위 댓글 등록하기 -->
    <insert id="insertGroupReply" parameterType="replyVo">
    	insert into reply values (REPLY_SEQ.nextval , #{n_no} , #{user_id} , #{r_cont} , sysdate , REPLY_SEQ.nextval , null)
    </insert>
    
    <!-- 대댓글 등록하기 r_gno 에 들어가야 할 데이터는 부모댓글에 있는 r_gno 값이다.  -->
    <insert id="insertChildReply" parameterType="replyVo">
    	insert into reply values(REPLY_SEQ.nextval  , #{n_no} , #{user_id} , #{r_cont} , sysdate , #{r_gno} , #{r_parent})
    </insert>
    
    
    
    <!--  댓글 수정하기-->
    <update id="updateReply" parameterType="replyVo">
    	update reply set r_cont = #{r_cont}  , r_regdt = sysdate 
		where r_no = #{r_no} 
    </update>
    
    
    <!-- 댓글 삭제하기 동시에 삭제한 내용 받아오기 -->
    <update id="deleteReply" parameterType="int">
    	update reply set r_cont = '삭제된 댓글입니다.'  where r_no = #{r_no}
    	<selectKey keyColumn="r_no" keyProperty="r_cont" resultType="String" order="AFTER">
    		select r_cont 
    		from reply 
    		where r_no = #{r_no}
    	</selectKey>
    </update>
    
    
    <delete id="deleteNote" parameterType="int">
    	 delete from note where n_no= #{n_no}
    </delete>
    
    <select id="userList" parameterType="int" resultType="userVo">
    	/* kr.or.ddit.note.userList */
        select a.user_id , a.user_nm , a.email , a.phone , a.purpose , a.p_state 
        from
        (SELECT u.user_id  , u.user_nm , u.email, u.phone , u.purpose purpose, p.p_state , p.p_code p_code 
		FROM users u left outer join p_attend p
        on (u.user_id = p.user_id)
        WHERE u.user_id in 
						(SELECT user_id 
						FROM p_attend 
						WHERE p_code = #{value} AND p_state IN ('04' , '05' , '10')
						union 
						SELECT user_id
						FROM project
						WHERE p_code = #{value}) 
        ) a           
        WHERE a.p_code = #{value} OR a.purpose = 'C'     
    </select>
    
    <select id="notattenduserList" parameterType="userVo" resultType="userVo">
		SELECT user_id, user_nm
		FROM users 
		WHERE purpose ='P' AND user_id not in (SELECT user_id
		                        FROM p_attend 
		                        WHERE p_state = '04' AND p_code = #{p_code}
		                        GROUP BY user_id ) AND group_nm = #{group_nm} AND u_div = 'T'
		ORDER BY user_id
    </select>
    
    <update id="inviteUser" parameterType="pattendVo">
    	MERGE INTO p_attend
		USING dual
		ON (p_code = #{p_code} AND user_id = #{user_id})
		WHEN matched THEN 
		   UPDATE SET p_state = '04'
		WHEN NOT MATCHED THEN
		INSERT (P_CODE,USER_ID,P_STATE) VALUES (#{p_code}, #{user_id}, '04')
    </update>
    
    <!-- 프로젝트 종료 버튼이 보이는지 권한 체크위해 검사 -->
    
    <select id="checkFinishProjectBtnAble" parameterType="int" resultType="String">
        select user_id
        from project 
        where p_code = #{p_code}
    </select>
    
        <!-- 협업툴 달력리스트 모두보기 -->
    <select id="calendarListN" resultType="noteVo" parameterType="int">
        SELECT n_no, n_title, n_sdt, n_edt, n_state, p_code
		FROM note 
		WHERE p_code = #{p_code}   
    </select>
    
    <!-- 협업툴 달력 내것만 보기 -->
    <select id="calendarUser" resultType="noteVo" parameterType="noteVo">
        SELECT n_no, n_title, n_sdt, n_edt, n_state, p_code, user_id
		FROM note 
		WHERE p_code = #{p_code} AND user_id = #{user_id}   
    </select>
</mapper>