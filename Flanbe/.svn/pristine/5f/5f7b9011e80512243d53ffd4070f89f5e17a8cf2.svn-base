<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="profile">
	
	<!-- 회원 정보 조회 -->
	<select id="selectUser" resultType="userVo" parameterType="String">
		SELECT * FROM users WHERE user_id= #{value}	
	</select>

	<!-- 자기소개 수정 -->
	<update id="updateIntro" parameterType="userVo">
		UPDATE users SET intro = #{intro} 
		WHERE user_id = #{user_id}
	</update>
	
	<!-- 회원 정보 수정 -->
	<update id="updateInfo" parameterType="userVo">
		UPDATE users SET user_nm = #{user_nm}, 
						group_nm = #{group_nm},
						phone = #{phone}, 
						base_addr = #{base_addr}, 
						detail_addr = #{detail_addr}, 
						u_div = #{u_div},
						zipcode = #{zipcode}, 
						photoroute = #{photoroute}
		WHERE user_id = #{user_id}
	</update>
	
	<!-- 비밀 번호 변경 -->
	<update id="changePass" parameterType="userVo">
		UPDATE users SET pass = #{pass}
		WHERE user_id = #{user_id}
	</update>
	
   	<!-- 회원 탈퇴 -->
	<update id="deleteUser" parameterType="String">
		UPDATE users SET u_act = '03'
		WHERE user_id = #{user_id}
	</update>
	
<!-- 진행한 프로젝트 페이지 -->	
	<!-- 진행한(완료)  프로젝트 갯수 -->
	<select id="countJoinProject" parameterType="String" resultType="int">
		SELECT count(*)
		FROM p_attend
		WHERE user_id = #{user_id}
		AND p_state = '05'
	</select>
	
	<!-- 진행한 프로젝트 누적 금액 -->
	<select id="sumMoney" parameterType="String" resultType="int">
        SELECT NVL(sum(p_money),0) sum
		FROM p_attend pa, project pr 
		WHERE pa.user_id = #{user_id}
		AND pa.p_state = '05'
		AND pa.p_code = pr.p_code
	</select>

	<!--  진행한 프로젝트 분야(프로젝트 수행 이력 테이블 가지고 오기) --> 
	<select id="selectProjectHistory" parameterType="String" resultType="historyVo">
		select *
		from history
		where user_id = #{user_id}
	</select>

	<!-- 진행한 프로젝트 평균 금액 -->
	<select id="avgMoney" parameterType="String" resultType="int">
		SELECT NVL(round(avg(p_money), 1),0) avg_money
		FROM p_attend pa, project pr 
		WHERE pa.user_id = #{user_id}
		AND pa.p_state = '05'
		AND pa.p_code = pr.p_code
	</select>
	
	<!-- 진행한 프로젝트 평균 기간 -->
	<select id="avgPeriod" parameterType="String" resultType="int">
		SELECT NVL(round(avg(period), 1),0) avg_money
		FROM p_attend pa, project pr 
		WHERE pa.user_id = #{user_id}
		AND pa.p_state = '05'
		AND pa.p_code = pr.p_code
	</select>

	<!-- 진행한 프로젝트 리스트 페이징 -->
	<select id="joinProjectPaging"  parameterType="pageVo" resultType="projectVo">
		SELECT *
		FROM
		(SELECT ROWNUM rn, a.*
		FROM
			(SELECT pr.*
             FROM p_attend pa, project pr 
             WHERE pa.user_id = #{user_id}
             AND pa.p_state = '05'
             AND pa.p_code = pr.p_code
			 ORDER BY pr.p_code DESC) a
		WHERE ROWNUM &lt;= #{page} * #{pageSize})
		WHERE rn BETWEEN (#{page}-1)* #{pageSize} + 1 AND #{page} * #{pageSize}
	</select>	
	<!-- 진행한 프로젝트 리스트 카운트 -->	
	<select id="joinProjectCnt"  parameterType="String" resultType="int">
        SELECT count(*)
		FROM p_attend pa, project pr 
		WHERE pa.user_id = #{user_id}
		AND pa.p_state = '05'
		AND pa.p_code = pr.p_code
	</select>
	
<!-- 경력 페이지 -->	
	<!-- 경력 리스트 출력 -->
	<select id="selectCareerList" parameterType="String" resultType="careerVo">
		SELECT c_no, user_id, c_nm, c_dept, c_position, to_char(c_sdt, 'YYYY-MM-DD') c_sdt, to_char(c_edt, 'YYYY-MM-DD') c_edt, c_cont
		FROM career
		WHERE user_id = #{user_id}
		ORDER BY c_no desc
	</select>
  	<!-- 경력 등록 -->
	<insert id="insertCareer" parameterType="careerVo">
		INSERT INTO career
		   	   (c_no, user_id, c_nm, c_dept, c_position, c_sdt, c_edt, c_cont)
		VALUES (career_seq.nextval, 
		#{user_id}, #{c_nm}, #{c_dept}, #{c_position}, #{c_sdt}, #{c_edt}, #{c_cont})
	</insert>
  	<!-- 경력 삭제 -->
	<delete id="deleteCareer" parameterType="int">
		DELETE career
		WHERE c_no = #{c_no}	   	   
	</delete>
	<!-- 경력 수정 -->
	<update	id="updateCareer" parameterType="careerVo">
		UPDATE career SET c_nm = #{c_nm},
	                c_dept = #{c_dept},
	                c_position = #{c_position},
	                c_sdt = #{c_sdt},
	                c_edt = #{c_edt},
	                c_cont = #{c_cont}
		WHERE c_no = #{c_no}
	</update>
	<select id="selectCareerDate" parameterType="String" resultType="String">
		SELECT  trim(DECODE( trunc(    sum(months_between(c_edt ,c_sdt )) / 12) , 0 , ' ' , TO_CHAR(trunc(   sum(months_between(c_edt ,c_sdt )) / 12)) || '년')
		||
		DECODE( TRUNC(MOD( sum(months_between(c_edt ,c_sdt )) , 12)) , 0 , ' ' , TRUNC(MOD( sum(months_between(c_edt ,c_sdt )) , 12))  || '개월' )) day, user_id
		FROM career
		WHERE user_id=#{user_id}
		GROUP BY user_id
	</select>
<!-- 보유기술 페이지 -->		
	<!-- 보유기술 리스트 출력 -->
	<select id="selectSkillList" parameterType="String" resultType="uskillVo">
		SELECT * FROM u_skill WHERE user_id=#{user_id}
		ORDER BY us_prof desc
	</select>
  	<!-- 보유기술 등록 -->
	<insert id="insertSkill" parameterType="careerVo">
		INSERT INTO u_skill
		   	   (us_no, user_id, us_kind, us_prof)
		VALUES (u_skill_seq.nextval, 
		#{user_id}, #{us_kind}, #{us_prof})
	</insert>
  	<!-- 보유기술 삭제 -->
	<delete id="deleteSkill" parameterType="int">
		DELETE u_skill
		WHERE us_no=#{us_no}	   	   
	</delete>
	<!-- 보유기술 수정 -->
	<update	id="updateSkill" parameterType="careerVo">
		UPDATE u_skill SET us_prof=#{us_prof}
		WHERE us_kind=#{us_kind}
		  AND user_id=#{user_id}
	</update>
	
<!-- 포트폴리오  -->
	<!-- 해당 유저의 대표 포트 폴리오만 select 프로필 메인 페이지용-->
	<select id="selectReprePopol" parameterType="String" resultType="portfolioVo">
		SELECT po_no
			  ,user_id
			  ,po_title
			  ,po_repre
			  ,po_field
			  ,po_cont
			  ,po_sdt
			  ,po_edt
			  ,po_skil
			  ,po_image
		FROM portfolio
		WHERE user_id=#{user_id}
		AND po_repre = 'Y'
	</select>

	<!-- 포트폴리오 메인페이지, 포트폴리오 상세페이지에 출력 할 쿼리 SELECT-->
	<select id="selectPopol" parameterType="String" resultType="portfolioVo">
		SELECT po_no
			  ,user_id
			  ,po_title
			  ,po_repre
			  ,po_field
			  ,po_cont
			  ,po_sdt
			  ,po_edt
			  ,po_skil
			  ,po_image
		FROM portfolio
		WHERE user_id=#{user_id}
	</select>
	
	<!-- 해당 포트폴리오 번호의 리스트 출력 -->
	<select id="getPopolList" parameterType="int" resultType="portfolioVo">
		SELECT po_no
			  ,user_id
			  ,po_title
			  ,po_repre
			  ,po_field
			  ,po_cont
			  ,po_sdt
			  ,po_edt
			  ,po_skil
			  ,po_image
		FROM portfolio
		WHERE po_no=#{po_no}
	</select>
	
	<!-- 포트폴리오 등록 작성 쿼리 INSERT-->
	<insert id="insertPopol" parameterType="portfolioVo" >
		INSERT INTO portfolio(po_no, user_id, po_title, po_repre, po_field, po_cont, po_sdt, po_edt, po_skil, po_image)
		VALUES (PORTFOLIO_SEQ.NEXTVAL, #{user_id}, #{po_title},'N', #{po_field}, #{po_cont},
			    #{po_sdt}, #{po_edt}, #{po_skil}, #{po_image , jdbcType=VARCHAR})
	</insert>
	
	<!-- 최대 파일번호 -->
	<select id="maxnumFile" resultType="int">
		SELECT MAX(po_no) cnt FROM portfolio
	</select>
	
	<!-- 포트폴리오 해당 a_no에 대한 첨부파일 가져오기 -->
	<select id="getfiles" resultType="attachVo" parameterType="int">
		select a_no
		      ,no
		      ,a_seq
		      ,a_nm
		      ,a_route
		FROM attach 
		WHERE a_no=#{a_no}
	</select>
	
	<!-- 포트폴리오 첨부파일 출력 -->
	<select id="selectfiles" resultType="attachVo" parameterType="int">
		SELECT a_no
		      ,no
		      ,a_seq
		      ,a_nm
		      ,a_route
		FROM attach 
		WHERE no=#{po_no} 
		AND a_seq='02'
	</select>
	
	<!-- 포트폴리오 첨부파일 추가 -->
	<insert id="insertfiles" parameterType="attachVo">
		INSERT INTO attach(a_no, no, a_seq, a_nm, a_route) 
		VALUES (ATTACH_SEQ.NEXTVAL, #{no}, '02', #{a_nm}, #{a_route})
	</insert>
	
	<!-- 포트폴리오 첨부파일 수정 -->
	<update id="updatefiles" parameterType="attachVo">
		UPDATE attach SET a_nm=#{a_nm},a_route=#{a_route} WHERE a_no=#{a_no} 
	</update>
	
	<!-- 포트폴리오 첨부파일 삭제 -->
	<delete id="deletefiles" parameterType="int">
		DELETE FROM attach WHERE a_no=#{a_no}
	</delete>
	
	<!-- 대표 포트폴리오 설정 해제(po_repre Y -> po_repre N) -->
	<update id="representNPopol" parameterType="String">
		UPDATE portfolio SET po_repre='N' WHERE po_repre='Y' AND user_id=#{user_id}
	</update>
	
	<!-- 대표 포트폴리오 설정(po_repre N -> po_repre Y) -->
	<update id="representYPopol" parameterType="portfolioVo">
		UPDATE portfolio SET po_repre='Y' WHERE po_no=#{po_no} AND user_id=#{user_id}
	</update>
	
	<!-- 포트폴리오 수정 -->
	<update id="modifyPopol" parameterType="portfolioVo">
		UPDATE portfolio SET po_title=#{po_title}, po_field=#{po_field}, po_cont=#{po_cont}, po_sdt=#{po_sdt},
							 po_edt=#{po_edt}, po_skil=#{po_skil}, po_image=#{po_image}
		WHERE po_no=#{po_no} 
	</update>
	
	<!-- 포트폴리오 삭제 -->
	<delete id="deletePopol" parameterType="int">
		DELETE FROM portfolio WHERE po_no=#{po_no}
	</delete>
	
	<!--  분야 필터 출력-->
	<select id="selectFieldFilter" parameterType="searchVo" resultType="portfolioVo">
		SELECT *
		FROM portfolio
		WHERE user_id=#{user_id} 
		AND po_field LIKE '%'||#{value1}||'%'
		<choose>
			<when test="valueSize == 2">
				AND po_field LIKE '%'||#{value2}||'%'
			</when>
			<when test="valueSize == 3">
				AND po_field LIKE '%'||#{value3}||'%'
			</when>
			<when test="valueSize == 4">
				AND po_field LIKE '%'||#{value4}||'%'
			</when>
			<when test="valueSize == 5">
				AND po_field LIKE '%'||#{value5}||'%'
			</when>
		</choose>
	</select>
	
</mapper>