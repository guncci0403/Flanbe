<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="profile">
	
	<!-- 회원 정보 조회 -->
	<select id="selectUser" resultType="userVo" parameterType="String">
		SELECT * FROM users WHERE user_id= #{value}	
	</select>

	<!-- 자기소개 수정 -->
	<update id="updateIntro" parameterType="userVo">
		UPDATE users SET intro = #{intro} 
		WHERE user_id = #{user_id}
	</update>
	
	<!-- 회원 정보 수정 -->
	<update id="updateInfo" parameterType="userVo">
		UPDATE users SET user_nm = #{user_nm}, 
						group_nm = #{group_nm},
						phone = #{phone}, 
						base_addr = #{base_addr}, 
						detail_addr = #{detail_addr}, 
						u_div = #{u_div},
						zipcode = #{zipcode}, 
						photoroute = #{photoroute}
		WHERE user_id = #{user_id}
	</update>
	
	<!-- 비밀 번호 변경 -->
	<update id="changePass" parameterType="userVo">
		UPDATE users SET pass = #{pass}
		WHERE user_id = #{user_id}
	</update>
	
   	<!-- 회원 탈퇴 -->
	<update id="deleteUser" parameterType="String">
		UPDATE users SET u_act = '03'
		WHERE user_id = #{user_id}
	</update>
	
<!-- 진행한 프로젝트 페이지 -->	
	<!-- 진행한 (진행중 포함) 프로젝트 갯수 -->
	<select id="countJoinProject" parameterType="String" resultType="int">
		SELECT count(*)
		FROM p_attend
		WHERE user_id = #{user_id}
		AND (p_state = '04'
		OR p_state = '05')
	</select>
	
	<!-- 진행한 프로젝트 누적 금액 -->
	<select id="sumMoney" parameterType="String" resultType="int">
        SELECT NVL(sum(p_money),0) sum
		FROM p_attend pa, project pr 
		WHERE pa.user_id = #{user_id}
		AND (pa.p_state = '04'
		OR pa.p_state = '05')
		AND pa.p_code = pr.p_code
	</select>

	<!--  진행한 프로젝트 분야(프로젝트 수행 이력 테이블 가지고 오기) --> 
	<select id="selectProjectHistory" parameterType="String" resultType="historyVo">
		select *
		from history
		where user_id = #{user_id}
	</select>

	<!-- 진행한 프로젝트 평균 금액 -->
	<select id="avgMoney" parameterType="String" resultType="int">
		SELECT NVL(round(avg(p_money), 1),0) avg_money
		FROM p_attend pa, project pr 
		WHERE pa.user_id = #{user_id}
		AND (pa.p_state = '04'
		OR pa.p_state = '05')
		AND pa.p_code = pr.p_code
	</select>
	
	<!-- 진행한 프로젝트 평균 기간 -->
	<select id="avgPeriod" parameterType="String" resultType="int">
		SELECT NVL(round(avg(period), 1),0) avg_money
		FROM p_attend pa, project pr 
		WHERE pa.user_id = #{user_id}
		AND (pa.p_state = '04'
		OR pa.p_state = '05')
		AND pa.p_code = pr.p_code
	</select>

	<!-- 진행한 프로젝트 리스트 페이징 -->
	<select id="joinProjectPaging"  parameterType="pageVo" resultType="projectVo">
		SELECT *
		FROM
		(SELECT ROWNUM rn, a.*
		FROM
			(SELECT pr.*
             FROM p_attend pa, project pr 
             WHERE pa.user_id = #{user_id}
             AND (pa.p_state = '04'
             OR pa.p_state = '05')
             AND pa.p_code = pr.p_code
			 ORDER BY pr.p_code DESC) a
		WHERE ROWNUM &lt;= #{page} * #{pageSize})
		WHERE rn BETWEEN (#{page}-1)* #{pageSize} + 1 AND #{page} * #{pageSize}
	</select>	
	<!-- 진행한 프로젝트 리스트 카운트 -->	
	<select id="joinProjectCnt"  parameterType="String" resultType="int">
        SELECT count(*)
		FROM p_attend pa, project pr 
		WHERE pa.user_id = #{user_id}
		AND (pa.p_state = '04'
		OR pa.p_state = '05')
		AND pa.p_code = pr.p_code
	</select>
	
<!-- 경력 페이지 -->	
	<!-- 경력 리스트 출력 -->
	<select id="selectCareerList" parameterType="String" resultType="careerVo">
		SELECT c_no, user_id, c_nm, c_dept, c_position, to_char(c_sdt, 'YYYY-MM-DD') c_sdt, to_char(c_edt, 'YYYY-MM-DD') c_edt, c_cont
		FROM career
		WHERE user_id = #{user_id}
		ORDER BY c_no desc
	</select>
  	<!-- 경력 등록 -->
	<insert id="insertCareer" parameterType="careerVo">
		INSERT INTO career
		   	   (c_no, user_id, c_nm, c_dept, c_position, c_sdt, c_edt, c_cont)
		VALUES (career_seq.nextval, 
		#{user_id}, #{c_nm}, #{c_dept}, #{c_position}, #{c_sdt}, #{c_edt}, #{c_cont})
	</insert>
  	<!-- 경력 삭제 -->
	<delete id="deleteCareer" parameterType="int">
		DELETE career
		WHERE c_no = #{c_no}	   	   
	</delete>
	<!-- 경력 수정 -->
	<update	id="updateCareer" parameterType="careerVo">
		UPDATE career SET c_nm = #{c_nm},
	                c_dept = #{c_dept},
	                c_position = #{c_position},
	                c_sdt = #{c_sdt},
	                c_edt = #{c_edt},
	                c_cont = #{c_cont}
		WHERE c_no = #{c_no}
	</update>
	<select id="selectCareerDate" parameterType="String" resultType="String">
		SELECT  trim(DECODE( trunc(    sum(months_between(c_edt ,c_sdt )) / 12) , 0 , ' ' , TO_CHAR(trunc(   sum(months_between(c_edt ,c_sdt )) / 12)) || '년')
		||
		DECODE( TRUNC(MOD( sum(months_between(c_edt ,c_sdt )) , 12)) , 0 , ' ' , TRUNC(MOD( sum(months_between(c_edt ,c_sdt )) , 12))  || '개월' )) day, user_id
		FROM career
		WHERE user_id = #{user_id}
		GROUP BY user_id
	</select>
<!-- 보유기술 페이지 -->		
	<!-- 보유기술 리스트 출력 -->
	<select id="selectSkillList" parameterType="String" resultType="uskillVo">
		SELECT * FROM u_skill WHERE user_id = #{user_id}
		ORDER BY us_prof desc
	</select>
  	<!-- 보유기술 등록 -->
	<insert id="insertSkill" parameterType="careerVo">
		INSERT INTO u_skill
		   	   (us_no, user_id, us_kind, us_prof)
		VALUES (u_skill_seq.nextval, 
		#{user_id}, #{us_kind}, #{us_prof})
	</insert>
  	<!-- 보유기술 삭제 -->
	<delete id="deleteSkill" parameterType="int">
		DELETE u_skill
		WHERE us_no = #{us_no}	   	   
	</delete>
	<!-- 보유기술 수정 -->
	<update	id="updateSkill" parameterType="careerVo">
		UPDATE u_skill SET us_prof = #{us_prof}
		WHERE us_kind = #{us_kind}
		  AND user_id = #{user_id}
	</update>
</mapper>